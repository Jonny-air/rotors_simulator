<?xml version="1.0"?>
<!--
  Copyright 2015 Fadri Furrer, ASL, ETH Zurich, Switzerland
  Copyright 2015 Michael Burri, ASL, ETH Zurich, Switzerland
  Copyright 2015 Mina Kamel, ASL, ETH Zurich, Switzerland
  Copyright 2015 Janosch Nikolic, ASL, ETH Zurich, Switzerland
  Copyright 2015 Markus Achtelik, ASL, ETH Zurich, Switzerland

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<robot name="peregrine" xmlns:xacro="http://ros.org/wiki/xacro">
  <!-- Properties -->
  <xacro:property name="namespace" value="$(arg namespace)" />

  <!-- Slows down rotor vel in simulation s.t. no aliasing -->
  <xacro:property name="rotor_velocity_slowdown_sim" value="10" />

  <xacro:property name="use_mesh_file" value="true" />
  <xacro:property name="mesh_file" value="package://rotors_description/meshes/peregrine.dae" />

  <!-- Params to be adjusted from firefly to peregrine -->
  <xacro:property name="mass" value="4.6" /> <!-- [kg] -->
  <xacro:property name="body_width" value="0.4" /> <!-- [m] -->
  <xacro:property name="body_height" value="0.4" /> <!-- [m] -->
  <xacro:property name="mass_rotor" value="0.033" /> <!-- [kg] -->
  <xacro:property name="arm_length" value="0.42" /> <!-- [m] -->
  <xacro:property name="rotor_offset_top" value="-0.05" /> <!-- [m] -->
  <xacro:property name="radius_rotor" value="0.1778" /> <!-- [m] -->
  <xacro:property name="motor_constant" value="4.0879e-5" /> <!-- [kg m/s^2] -->
  <xacro:property name="moment_constant" value="0.0247" /> <!-- [m] -->

  <xacro:property name="time_constant_up" value="0.02" /> <!-- [s] -->
  <xacro:property name="time_constant_down" value="0.01" /> <!-- [s] -->

  <xacro:property name="max_rot_velocity" value="838" /> <!-- [rad/s] euals 8000rpm -->
  <xacro:property name="dead_rot_velocity" value="1" />

  <xacro:property name="sin30" value="0.5" />
  <xacro:property name="cos30" value="0.866025403784" />

  <xacro:property name="rotor_drag_coefficient" value="12.06428e-05" />
  <xacro:property name="rolling_moment_coefficient" value="0.000001" />

  <xacro:property name="dead_rot_velocity" value="1" />


  <!-- ############### -->
  <!-- HIL Properties  -->
  <!-- ############### -->
  <xacro:property name="serial_enabled" value="false" />
  <xacro:property name="serial_device" value="/dev/ttyACM0" />
  <xacro:property name="enable_hil" value="false" />



  <!-- Property Blocks -->
  <xacro:property name="body_inertia">
    <inertia ixx="0.19225" ixy="0.0" ixz="0.0" iyy="0.18493" iyz="0.0" izz="0.34422" /> <!-- [kg m^2] [kg m^2] [kg m^2] [kg m^2] [kg m^2] [kg m^2] -->
  </xacro:property>

  <!-- inertia of a single rotor, assuming it is a cuboid. Height=3mm, width=15mm -->
  <xacro:property name="rotor_inertia">
    <xacro:box_inertia x="${radius_rotor}" y="0.015" z="0.003" mass="${mass_rotor*rotor_velocity_slowdown_sim}" />
  </xacro:property>

  <!-- Included URDF Files -->
  <xacro:include filename="$(find rotors_description)/urdf/multirotor_base_advanced.xacro" />

  <!-- Instantiate multirotor_base_macro once -->
  <xacro:multirotor_base_macro
    robot_namespace="${namespace}"
    mass="${mass}"
    body_width="${body_width}"
    body_height="${body_height}"
    use_mesh_file="${use_mesh_file}"
    mesh_file="${mesh_file}"
    >
    <xacro:insert_block name="body_inertia" />
  </xacro:multirotor_base_macro>

  <!-- Instantiate rotors -->

  <gazebo>
    <plugin name='gazebo_mavlink_interface' filename='librotors_gazebo_mavlink_interface.so'>
      <robotNamespace>${namespace}</robotNamespace>
      <protocol_version>2.0</protocol_version>
      <imuSubTopic>/imu</imuSubTopic>
      <imu_rate>100</imu_rate>
      <gpsSubTopic>/gps_hil</gpsSubTopic>
      <gpsGtSubTopic>/gps_gt</gpsGtSubTopic>
      <lidarSubTopic></lidarSubTopic>
      <opticalFlowSubTopic></opticalFlowSubTopic>
      <motorSpeedCommandPubTopic>/gazebo/command/motor_speed</motorSpeedCommandPubTopic>
      <actuatorsPubTopic>/gazebo/command/actuator_speed</actuatorsPubTopic>

      <mavlink_addr>INADDR_ANY</mavlink_addr>
      <mavlink_udp_port>14560</mavlink_udp_port>

      <baudRate>921600</baudRate>
      <qgc_addr>INADDR_ANY</qgc_addr>
      <qgc_udp_port>14556</qgc_udp_port>

      <hil_mode>0</hil_mode>
      <hil_state_level>false</hil_state_level>
      <enable_lockstep>false</enable_lockstep>

      <use_tcp>true</use_tcp>
      <mavlink_tcp_port>4560</mavlink_tcp_port>

      <control_channels>
        <channel name='rotor1'>
          <input_index>0</input_index>
          <input_offset>0</input_offset>
          <input_scaling>${max_rot_velocity}</input_scaling>   <!-- max rad/s  [rad/s]-->
          <zero_position_disarmed>0</zero_position_disarmed>
          <zero_position_armed>0</zero_position_armed>
          <joint_control_type>gz_msg</joint_control_type>
        </channel>
        <channel name='rotor2'>
          <input_index>1</input_index>
          <input_offset>0</input_offset>
          <input_scaling>${max_rot_velocity}</input_scaling>
          <zero_position_disarmed>0</zero_position_disarmed>
          <zero_position_armed>0</zero_position_armed>
          <joint_control_type>gz_msg</joint_control_type>
        </channel>
        <channel name='rotor3'>
          <input_index>2</input_index>
          <input_offset>0</input_offset>
          <input_scaling>${max_rot_velocity}</input_scaling>
          <zero_position_disarmed>0</zero_position_disarmed>
          <zero_position_armed>0</zero_position_armed>
          <joint_control_type>gz_msg</joint_control_type>
        </channel>
        <channel name='rotor4'>
          <input_index>3</input_index>
          <input_offset>0</input_offset>
          <input_scaling>${max_rot_velocity}</input_scaling>
          <zero_position_disarmed>0</zero_position_disarmed>
          <zero_position_armed>0</zero_position_armed>
          <joint_control_type>gz_msg</joint_control_type>
        </channel>
        <channel name='rotor5'>
          <input_index>5</input_index>
          <input_offset>0</input_offset>
          <input_scaling>${max_rot_velocity}</input_scaling>
          <zero_position_disarmed>0</zero_position_disarmed>
          <zero_position_armed>0</zero_position_armed>
          <joint_control_type>gz_msg</joint_control_type>
        </channel>
        <channel name='rotor6'>
          <input_index>5</input_index>
          <input_offset>0</input_offset>
          <input_scaling>${max_rot_velocity}</input_scaling>
          <zero_position_disarmed>0</zero_position_disarmed>
          <zero_position_armed>0</zero_position_armed>
          <joint_control_type>gz_msg</joint_control_type>
        </channel>
      </control_channels>
    </plugin>


    <plugin name="${namespace}_propulsion" filename="librotors_gazebo_propulsion_plugin.so">
      <robotNamespace>${namespace}</robotNamespace>

        <prop name="rotor_0">
          <jointName>${namespace}/rotor_0_joint</jointName>
          <linkNameParent>${namespace}/rotor_0</linkNameParent>  <!-- eventuell namespace/rotor_${motor_number} -->
          <cp>${cos30*arm_length} ${sin30*arm_length} ${rotor_offset_top}</cp>
          <axisPosRot>0 0 1</axisPosRot>
          <turnDir>ccw</turnDir>
          <speedRefTopic>gazebo/command/motor_speed</speedRefTopic>
          <motorNumber>0</motorNumber>
          <propParamsYAML>$(find rotors_gazebo)/resource/peregrine_propconfig.yaml</propParamsYAML>
          <tauUp>${time_constant_up}</tauUp>       <!-- first-order system timeconstant rev up [s] -->
          <tauDown>${time_constant_down}</tauDown>   <!-- first-order system timeconstant rev down [s] -->
          <tauSpoolUp>${time_constant_up}</tauSpoolUp>        <!-- first-order system timeconstant in dead-zone, i.e between speeds 0 and rdpsDead [s]-->
          <rdpsDead>1</rdpsDead>    <!-- prop speed dead-zone = 0-rdpsDead [rad/s]-->
          <rdpsMax>${max_rot_velocity}</rdpsMax> <!-- max prop speed [rad/s]-->
        </prop>

        <prop name="rotor_1">
          <jointName>${namespace}/rotor_1_joint</jointName>
          <linkNameParent>${namespace}/rotor_1</linkNameParent>  <!-- eventuell namespace/rotor_${motor_number} -->
          <cp>0 ${arm_length} ${rotor_offset_top}</cp>
          <axisPosRot>0 0 -1</axisPosRot>
          <turnDir>cw</turnDir>
          <speedRefTopic>gazebo/command/motor_speed</speedRefTopic>
          <motorNumber>1</motorNumber>
          <propParamsYAML>$(find rotors_gazebo)/resource/peregrine_propconfig.yaml</propParamsYAML>
          <tauUp>${time_constant_up}</tauUp>       <!-- first-order system timeconstant rev up [s] -->
          <tauDown>${time_constant_down}</tauDown>   <!-- first-order system timeconstant rev down [s] -->
          <tauSpoolUp>${time_constant_up}</tauSpoolUp>        <!-- first-order system timeconstant in dead-zone, i.e between speeds 0 and rdpsDead [s]-->
          <rdpsDead>1</rdpsDead>    <!-- prop speed dead-zone = 0-rdpsDead [rad/s]-->
          <rdpsMax>${max_rot_velocity}</rdpsMax> <!-- max prop speed [rad/s]-->
        </prop>

        <prop name="rotor_2">
          <jointName>${namespace}/rotor_2_joint</jointName>
          <linkNameParent>${namespace}/rotor_2</linkNameParent>  <!-- eventuell namespace/rotor_${motor_number} -->
          <cp>-${cos30*arm_length} ${sin30*arm_length} ${rotor_offset_top}</cp>
          <axisPosRot>0 0 1</axisPosRot>
          <turnDir>ccw</turnDir>
          <speedRefTopic>gazebo/command/motor_speed</speedRefTopic>
          <motorNumber>2</motorNumber>
          <propParamsYAML>$(find rotors_gazebo)/resource/peregrine_propconfig.yaml</propParamsYAML>
          <tauUp>${time_constant_up}</tauUp>       <!-- first-order system timeconstant rev up [s] -->
          <tauDown>${time_constant_down}</tauDown>   <!-- first-order system timeconstant rev down [s] -->
          <tauSpoolUp>${time_constant_up}</tauSpoolUp>        <!-- first-order system timeconstant in dead-zone, i.e between speeds 0 and rdpsDead [s]-->
          <rdpsDead>1</rdpsDead>    <!-- prop speed dead-zone = 0-rdpsDead [rad/s]-->
          <rdpsMax>${max_rot_velocity}</rdpsMax> <!-- max prop speed [rad/s]-->
        </prop>

        <prop name="rotor_3">
          <jointName>${namespace}/rotor_3_joint</jointName>
          <linkNameParent>${namespace}/rotor_3</linkNameParent>  <!-- eventuell namespace/rotor_${motor_number} -->
          <cp>-${cos30*arm_length} -${sin30*arm_length} ${rotor_offset_top}</cp>
          <axisPosRot>0 0 -1</axisPosRot>
          <turnDir>cw</turnDir>
          <speedRefTopic>gazebo/command/motor_speed</speedRefTopic>
          <motorNumber>3</motorNumber>
          <propParamsYAML>$(find rotors_gazebo)/resource/peregrine_propconfig.yaml</propParamsYAML>
          <tauUp>${time_constant_up}</tauUp>       <!-- first-order system timeconstant rev up [s] -->
          <tauDown>${time_constant_down}</tauDown>   <!-- first-order system timeconstant rev down [s] -->
          <tauSpoolUp>${time_constant_up}</tauSpoolUp>        <!-- first-order system timeconstant in dead-zone, i.e between speeds 0 and rdpsDead [s]-->
          <rdpsDead>1</rdpsDead>    <!-- prop speed dead-zone = 0-rdpsDead [rad/s]-->
          <rdpsMax>${max_rot_velocity}</rdpsMax> <!-- max prop speed [rad/s]-->
        </prop>

        <prop name="rotor_4">
          <jointName>${namespace}/rotor_4_joint</jointName>
          <linkNameParent>${namespace}/rotor_4</linkNameParent>  <!-- eventuell namespace/rotor_${motor_number} -->
          <cp>0 -${arm_length} ${rotor_offset_top}</cp>
          <axisPosRot>0 0 1</axisPosRot>
          <turnDir>ccw</turnDir>
          <speedRefTopic>gazebo/command/motor_speed</speedRefTopic>
          <motorNumber>4</motorNumber>
          <propParamsYAML>$(find rotors_gazebo)/resource/peregrine_propconfig.yaml</propParamsYAML>
          <tauUp>${time_constant_up}</tauUp>       <!-- first-order system timeconstant rev up [s] -->
          <tauDown>${time_constant_down}</tauDown>   <!-- first-order system timeconstant rev down [s] -->
          <tauSpoolUp>${time_constant_up}</tauSpoolUp>        <!-- first-order system timeconstant in dead-zone, i.e between speeds 0 and rdpsDead [s]-->
          <rdpsDead>1</rdpsDead>    <!-- prop speed dead-zone = 0-rdpsDead [rad/s]-->
          <rdpsMax>${max_rot_velocity}</rdpsMax> <!-- max prop speed [rad/s]-->
        </prop>

        <prop name="rotor_5">
          <jointName>${namespace}/rotor_5_joint</jointName>
          <linkNameParent>${namespace}/rotor_5</linkNameParent>  <!-- eventuell namespace/rotor_${motor_number} -->
          <cp>${cos30*arm_length} -${sin30*arm_length} ${rotor_offset_top}</cp>
          <axisPosRot>0 0 -1</axisPosRot>
          <turnDir>cw</turnDir>
          <speedRefTopic>gazebo/command/motor_speed</speedRefTopic>
          <motorNumber>5</motorNumber>
          <propParamsYAML>$(find rotors_gazebo)/resource/peregrine_propconfig.yaml</propParamsYAML>
          <tauUp>${time_constant_up}</tauUp>       <!-- first-order system timeconstant rev up [s] -->
          <tauDown>${time_constant_down}</tauDown>   <!-- first-order system timeconstant rev down [s] -->
          <tauSpoolUp>${time_constant_up}</tauSpoolUp>        <!-- first-order system timeconstant in dead-zone, i.e between speeds 0 and rdpsDead [s]-->
          <rdpsDead>1</rdpsDead>    <!-- prop speed dead-zone = 0-rdpsDead [rad/s]-->
          <rdpsMax>${max_rot_velocity}</rdpsMax> <!-- max prop speed [rad/s]-->
        </prop>

    </plugin>
  </gazebo>



  <xacro:vertical_rotor_advanced
    robot_namespace="${namespace}"
    direction="ccw"
    parent="${namespace}/base_link"
    mass_rotor="${mass_rotor}"
    radius_rotor="${radius_rotor}"
    motor_number="0"
    color="Red"
    use_own_mesh="false"
    mesh="">
    <origin xyz="${cos30*arm_length} ${sin30*arm_length} ${rotor_offset_top}" rpy="0 0 0" />
    <xacro:insert_block name="rotor_inertia" />
  </xacro:vertical_rotor_advanced>

  <xacro:vertical_rotor_advanced
    robot_namespace="${namespace}"
    direction="cw"
    parent="${namespace}/base_link"
    mass_rotor="${mass_rotor}"
    radius_rotor="${radius_rotor}"
    motor_number="1"
    color="Blue"
    use_own_mesh="false"
    mesh="">
    <origin xyz="0 ${arm_length} ${rotor_offset_top}" rpy="0 0 0" />
    <xacro:insert_block name="rotor_inertia" />
  </xacro:vertical_rotor_advanced>

  <xacro:vertical_rotor_advanced
    robot_namespace="${namespace}"
    direction="ccw"
    parent="${namespace}/base_link"
    mass_rotor="${mass_rotor}"
    radius_rotor="${radius_rotor}"
    motor_number="2"
    color="Blue"
    use_own_mesh="false"
    mesh="">
    <origin xyz="-${cos30*arm_length} ${sin30*arm_length} ${rotor_offset_top}" rpy="0 0 0" />
    <xacro:insert_block name="rotor_inertia" />
  </xacro:vertical_rotor_advanced>

  <xacro:vertical_rotor_advanced
    robot_namespace="${namespace}"
    direction="cw"
    parent="${namespace}/base_link"
    mass_rotor="${mass_rotor}"
    radius_rotor="${radius_rotor}"
    motor_number="3"
    color="Blue"
    use_own_mesh="false"
    mesh="">
    <origin xyz="-${cos30*arm_length} -${sin30*arm_length} ${rotor_offset_top}" rpy="0 0 0" />
    <xacro:insert_block name="rotor_inertia" />
  </xacro:vertical_rotor_advanced>

  <xacro:vertical_rotor_advanced
    robot_namespace="${namespace}"
    direction="ccw"
    parent="${namespace}/base_link"
    mass_rotor="${mass_rotor}"
    radius_rotor="${radius_rotor}"
    motor_number="4"
    color="Blue"
    use_own_mesh="false"
    mesh="">
    <origin xyz="0 -${arm_length} ${rotor_offset_top}" rpy="0 0 0" />
    <xacro:insert_block name="rotor_inertia" />
  </xacro:vertical_rotor_advanced>

  <xacro:vertical_rotor_advanced
    robot_namespace="${namespace}"
    direction="cw"
    parent="${namespace}/base_link"
    mass_rotor="${mass_rotor}"
    radius_rotor="${radius_rotor}"
    motor_number="5"
    color="Red"
    use_own_mesh="false"
    mesh="">
    <origin xyz="${cos30*arm_length} -${sin30*arm_length} ${rotor_offset_top}" rpy="0 0 0" />
    <xacro:insert_block name="rotor_inertia" />
  </xacro:vertical_rotor_advanced>

</robot>
