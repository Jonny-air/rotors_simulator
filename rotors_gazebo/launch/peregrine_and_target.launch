<launch>
  <arg name="mav_name_1" default="peregrine"/>
  <arg name="mav_name_2" default="firefly" />
  <arg name="world_name" default="basic"/>
  <arg name="enable_logging" default="false" />
  <arg name="enable_ground_truth" default="true" />
  <arg name="log_file" default="$(arg mav_name_1)" />
  <arg name="debug" default="false"/>
  <arg name="gui" default="true"/>
  <arg name="paused" default="true"/>
  <!-- The following line causes gzmsg and gzerr messages to be printed to the console
      (even when Gazebo is started through roslaunch) -->
  <arg name="verbose" default="false"/>
  <param name="use_sim_time" value="true"/>

  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  <!-- start an empty world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find rotors_gazebo)/worlds/$(arg world_name).world" />
    <arg name="debug" value="$(arg debug)" />
    <arg name="paused" value="$(arg paused)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="verbose" value="$(arg verbose)"/>
  </include>

  <!-- launch all the nodes -->
  <group ns="$(arg mav_name_1)">

    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name_1)" />
      <!-- The Odometry Sensor includes the peregrine_base.xacro -->
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)"/>
      <arg name="x" value="0"/>
      <arg name="y" value="2.8000"/>
      <arg name="z" value="0"/>
    </include>

    <!--optional joystick (comment out lee controller and hovering example)
    <node name="key_joystick" pkg="rotors_joy_interface" type="key_joystick.py" />

    <node name="joy_node" pkg="joy" type="joy_node" />

    <node name="rotors_joy_interface" pkg="rotors_joy_interface" type="rotors_joy_interface" />

    <node name="roll_pitch_yawrate_thrust_controller_node" pkg="rotors_control" type="roll_pitch_yawrate_thrust_controller_node" output="screen">
      <rosparam
        command="load" file="$(find rotors_gazebo)/resource/roll_pitch_yawrate_thrust_controller_$(arg mav_name).yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />
      <remap from="odometry" to="odometry_sensor1/odometry" />
    </node>
    -->

    <node name="lee_position_controller_node" pkg="rotors_control" type="lee_position_controller_node" output="screen">
      <rosparam command="load" file="$(find rotors_gazebo)/resource/lee_controller_$(arg mav_name_1).yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name_1).yaml" />
      <remap from="odometry" to="odometry_sensor1/odometry" />
    </node>

    <node name="hovering_example" pkg="rotors_gazebo" type="hovering_example" output="screen"/>

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
        <remap from="/joint_states" to="/$(arg mav_name_1)/joint_states" />
    </node>

    <!-- replaced by above
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    -->
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
  </group>

  <group ns="$(arg mav_name_2)">
      <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
          <arg name="mav_name" value="$(arg mav_name_2)" />
          <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
          <arg name="enable_logging" value="$(arg enable_logging)" />
          <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
          <arg name="log_file" value="$(arg mav_name_2)"/>
      </include>
      <node name="lee_position_controller_node" pkg="rotors_control" type="lee_position_controller_node" output="screen">
          <rosparam command="load" file="$(find rotors_gazebo)/resource/lee_controller_$(arg mav_name_2).yaml" />
          <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name_2).yaml" />
          <remap from="odometry" to="odometry_sensor1/odometry" />
      </node>
      <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
      <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />


      <!--- Trajectory planner -->
      <node name="eight" pkg="victim_drone" type="eight_node" output="screen">
          <remap from="uav_pose" to="odometry_sensor1/odometry"/>
          <!-- <remap from="uav_pose" to="ground_truth/odometry"/> -->
      </node>

      <!--- Trajectory sampler -->
      <node name="sampler" pkg="mav_trajectory_generation_ros" type="trajectory_sampler_node" output="screen">
          <remap from="path_segments" to="trajectory"/>
      </node>

  </group>


</launch>
